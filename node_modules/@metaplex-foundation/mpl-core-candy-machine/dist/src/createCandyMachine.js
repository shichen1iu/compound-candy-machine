"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCandyMachine = exports.DEFAULT_CONFIG_LINE_SETTINGS = void 0;
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const generated_1 = require("./generated");
const hooked_1 = require("./hooked");
exports.DEFAULT_CONFIG_LINE_SETTINGS = {
    prefixName: '',
    nameLength: 32,
    prefixUri: '',
    uriLength: 200,
    isSequential: false,
};
const createCandyMachine = async (context, input) => {
    const newInput = { ...input };
    const hiddenSettings = (0, umi_1.isOption)(input.hiddenSettings)
        ? input.hiddenSettings
        : (0, umi_1.wrapNullable)(input.hiddenSettings);
    const configLineSettings = (0, umi_1.isOption)(input.configLineSettings)
        ? input.configLineSettings
        : (0, umi_1.wrapNullable)(input.configLineSettings);
    if ((0, umi_1.isNone)(hiddenSettings) && (0, umi_1.isNone)(configLineSettings)) {
        newInput.configLineSettings = exports.DEFAULT_CONFIG_LINE_SETTINGS;
    }
    const space = (0, hooked_1.getCandyMachineSize)(newInput.itemsAvailable, newInput.configLineSettings ?? (0, umi_1.none)());
    const lamports = await context.rpc.getRent(space);
    return (0, umi_1.transactionBuilder)()
        .add((0, mpl_toolbox_1.createAccount)(context, {
        newAccount: newInput.candyMachine,
        lamports,
        space,
        programId: context.programs.get('mplCoreCandyMachineCore').publicKey,
    }))
        .add((0, generated_1.initializeCandyMachine)(context, {
        ...newInput,
        candyMachine: newInput.candyMachine.publicKey,
    }));
};
exports.createCandyMachine = createCandyMachine;
//# sourceMappingURL=createCandyMachine.js.map