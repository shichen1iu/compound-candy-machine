"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assetMintLimitGuardManifest = void 0;
const generated_1 = require("../generated");
const guards_1 = require("../guards");
/**
 * The assetMintLimit guard allows to specify a limit on the
 * number of mints for a specific NFT mint.
 *
 * The limit is set per NFT mint, per candy machine and per
 * identified (provided in the settings) to allow multiple
 * NFT mint limits within a Candy Machine. This is particularly
 * useful when using groups of guards and we want each of them
 * to have a different NFT mint limit.
 */
exports.assetMintLimitGuardManifest = {
    name: 'assetMintLimit',
    serializer: generated_1.getAssetMintLimitSerializer,
    mintParser: (context, mintContext, args) => {
        const [mintCounter] = (0, generated_1.findAssetMintCounterPda)(context, {
            id: args.id,
            asset: args.asset,
            candyMachine: mintContext.candyMachine,
            candyGuard: mintContext.candyGuard,
        });
        return {
            data: new Uint8Array(),
            remainingAccounts: [
                { publicKey: mintCounter, isWritable: true },
                { publicKey: args.asset, isWritable: false },
            ],
        };
    },
    routeParser: guards_1.noopParser,
};
//# sourceMappingURL=assetMintLimit.js.map