"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assetPaymentGuardManifest = void 0;
const generated_1 = require("../generated");
const guards_1 = require("../guards");
/**
 * The assetPayment guard allows minting by charging the
 * payer a Core Asset from a specified collection.
 * The asset will be transfered to a predefined destination.
 *
 * This means the mint address of the asset to transfer must be
 * passed when minting. This guard alone does not limit how many
 * times a holder can mint. A holder can mint as many times
 * as they have assets from the required collection to pay with.
 */
exports.assetPaymentGuardManifest = {
    name: 'assetPayment',
    serializer: generated_1.getAssetPaymentSerializer,
    mintParser: (context, mintContext, args) => {
        const remainingAccounts = [
            { publicKey: args.asset, isWritable: true },
            { publicKey: args.requiredCollection, isWritable: false },
            { publicKey: args.destination, isWritable: false },
        ];
        return { data: new Uint8Array(), remainingAccounts };
    },
    routeParser: guards_1.noopParser,
};
//# sourceMappingURL=assetPayment.js.map