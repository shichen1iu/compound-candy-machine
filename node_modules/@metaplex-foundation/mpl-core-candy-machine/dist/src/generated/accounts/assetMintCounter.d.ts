/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
/** PDA to track the number of mints for an individual address. */
export declare type AssetMintCounter = Account<AssetMintCounterAccountData>;
export declare type AssetMintCounterAccountData = {
    count: number;
};
export declare type AssetMintCounterAccountDataArgs = AssetMintCounterAccountData;
export declare function getAssetMintCounterAccountDataSerializer(): Serializer<AssetMintCounterAccountDataArgs, AssetMintCounterAccountData>;
export declare function deserializeAssetMintCounter(rawAccount: RpcAccount): AssetMintCounter;
export declare function fetchAssetMintCounter(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<AssetMintCounter>;
export declare function safeFetchAssetMintCounter(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<AssetMintCounter | null>;
export declare function fetchAllAssetMintCounter(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<AssetMintCounter[]>;
export declare function safeFetchAllAssetMintCounter(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<AssetMintCounter[]>;
export declare function getAssetMintCounterGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<AssetMintCounter, {
    count: number;
}>;
export declare function getAssetMintCounterSize(): number;
export declare function findAssetMintCounterPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    /** A unique identifier in the context of a Asset mint/Candy Machine/Candy Guard combo */
    id: number;
    /** The address of the Asset */
    asset: PublicKey;
    /** The address of the Candy Guard account */
    candyGuard: PublicKey;
    /** The address of the Candy Machine account */
    candyMachine: PublicKey;
}): Pda;
export declare function fetchAssetMintCounterFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findAssetMintCounterPda>[1], options?: RpcGetAccountOptions): Promise<AssetMintCounter>;
export declare function safeFetchAssetMintCounterFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findAssetMintCounterPda>[1], options?: RpcGetAccountOptions): Promise<AssetMintCounter | null>;
