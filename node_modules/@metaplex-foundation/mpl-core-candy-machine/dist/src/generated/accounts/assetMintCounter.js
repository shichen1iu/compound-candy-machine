"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchAssetMintCounterFromSeeds = exports.fetchAssetMintCounterFromSeeds = exports.findAssetMintCounterPda = exports.getAssetMintCounterSize = exports.getAssetMintCounterGpaBuilder = exports.safeFetchAllAssetMintCounter = exports.fetchAllAssetMintCounter = exports.safeFetchAssetMintCounter = exports.fetchAssetMintCounter = exports.deserializeAssetMintCounter = exports.getAssetMintCounterAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getAssetMintCounterAccountDataSerializer() {
    return (0, serializers_1.struct)([['count', (0, serializers_1.u16)()]], {
        description: 'AssetMintCounterAccountData',
    });
}
exports.getAssetMintCounterAccountDataSerializer = getAssetMintCounterAccountDataSerializer;
function deserializeAssetMintCounter(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getAssetMintCounterAccountDataSerializer());
}
exports.deserializeAssetMintCounter = deserializeAssetMintCounter;
async function fetchAssetMintCounter(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'AssetMintCounter');
    return deserializeAssetMintCounter(maybeAccount);
}
exports.fetchAssetMintCounter = fetchAssetMintCounter;
async function safeFetchAssetMintCounter(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeAssetMintCounter(maybeAccount) : null;
}
exports.safeFetchAssetMintCounter = safeFetchAssetMintCounter;
async function fetchAllAssetMintCounter(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'AssetMintCounter');
        return deserializeAssetMintCounter(maybeAccount);
    });
}
exports.fetchAllAssetMintCounter = fetchAllAssetMintCounter;
async function safeFetchAllAssetMintCounter(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeAssetMintCounter(maybeAccount));
}
exports.safeFetchAllAssetMintCounter = safeFetchAllAssetMintCounter;
function getAssetMintCounterGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCoreCandyGuard', 'CMAGAKJ67e9hRZgfC5SFTbZH8MgEmtqazKXjmkaJjWTJ');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({ count: [0, (0, serializers_1.u16)()] })
        .deserializeUsing((account) => deserializeAssetMintCounter(account))
        .whereSize(2);
}
exports.getAssetMintCounterGpaBuilder = getAssetMintCounterGpaBuilder;
function getAssetMintCounterSize() {
    return 2;
}
exports.getAssetMintCounterSize = getAssetMintCounterSize;
function findAssetMintCounterPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplCoreCandyGuard', 'CMAGAKJ67e9hRZgfC5SFTbZH8MgEmtqazKXjmkaJjWTJ');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('asset_mint_limit'),
        (0, serializers_1.u8)().serialize(seeds.id),
        (0, serializers_1.publicKey)().serialize(seeds.asset),
        (0, serializers_1.publicKey)().serialize(seeds.candyGuard),
        (0, serializers_1.publicKey)().serialize(seeds.candyMachine),
    ]);
}
exports.findAssetMintCounterPda = findAssetMintCounterPda;
async function fetchAssetMintCounterFromSeeds(context, seeds, options) {
    return fetchAssetMintCounter(context, findAssetMintCounterPda(context, seeds), options);
}
exports.fetchAssetMintCounterFromSeeds = fetchAssetMintCounterFromSeeds;
async function safeFetchAssetMintCounterFromSeeds(context, seeds, options) {
    return safeFetchAssetMintCounter(context, findAssetMintCounterPda(context, seeds), options);
}
exports.safeFetchAssetMintCounterFromSeeds = safeFetchAssetMintCounterFromSeeds;
//# sourceMappingURL=assetMintCounter.js.map