/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
/** PDA to track the number of mints for an individual address. */
export declare type NftMintCounter = Account<NftMintCounterAccountData>;
export declare type NftMintCounterAccountData = {
    count: number;
};
export declare type NftMintCounterAccountDataArgs = NftMintCounterAccountData;
export declare function getNftMintCounterAccountDataSerializer(): Serializer<NftMintCounterAccountDataArgs, NftMintCounterAccountData>;
export declare function deserializeNftMintCounter(rawAccount: RpcAccount): NftMintCounter;
export declare function fetchNftMintCounter(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<NftMintCounter>;
export declare function safeFetchNftMintCounter(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<NftMintCounter | null>;
export declare function fetchAllNftMintCounter(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<NftMintCounter[]>;
export declare function safeFetchAllNftMintCounter(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<NftMintCounter[]>;
export declare function getNftMintCounterGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<NftMintCounter, {
    count: number;
}>;
export declare function getNftMintCounterSize(): number;
export declare function findNftMintCounterPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    /** A unique identifier in the context of a NFT mint/Candy Machine/Candy Guard combo */
    id: number;
    /** The address of the NFT mint */
    mint: PublicKey;
    /** The address of the Candy Guard account */
    candyGuard: PublicKey;
    /** The address of the Candy Machine account */
    candyMachine: PublicKey;
}): Pda;
export declare function fetchNftMintCounterFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findNftMintCounterPda>[1], options?: RpcGetAccountOptions): Promise<NftMintCounter>;
export declare function safeFetchNftMintCounterFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findNftMintCounterPda>[1], options?: RpcGetAccountOptions): Promise<NftMintCounter | null>;
