"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchNftMintCounterFromSeeds = exports.fetchNftMintCounterFromSeeds = exports.findNftMintCounterPda = exports.getNftMintCounterSize = exports.getNftMintCounterGpaBuilder = exports.safeFetchAllNftMintCounter = exports.fetchAllNftMintCounter = exports.safeFetchNftMintCounter = exports.fetchNftMintCounter = exports.deserializeNftMintCounter = exports.getNftMintCounterAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getNftMintCounterAccountDataSerializer() {
    return (0, serializers_1.struct)([['count', (0, serializers_1.u16)()]], {
        description: 'NftMintCounterAccountData',
    });
}
exports.getNftMintCounterAccountDataSerializer = getNftMintCounterAccountDataSerializer;
function deserializeNftMintCounter(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getNftMintCounterAccountDataSerializer());
}
exports.deserializeNftMintCounter = deserializeNftMintCounter;
async function fetchNftMintCounter(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'NftMintCounter');
    return deserializeNftMintCounter(maybeAccount);
}
exports.fetchNftMintCounter = fetchNftMintCounter;
async function safeFetchNftMintCounter(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeNftMintCounter(maybeAccount) : null;
}
exports.safeFetchNftMintCounter = safeFetchNftMintCounter;
async function fetchAllNftMintCounter(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'NftMintCounter');
        return deserializeNftMintCounter(maybeAccount);
    });
}
exports.fetchAllNftMintCounter = fetchAllNftMintCounter;
async function safeFetchAllNftMintCounter(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeNftMintCounter(maybeAccount));
}
exports.safeFetchAllNftMintCounter = safeFetchAllNftMintCounter;
function getNftMintCounterGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCoreCandyGuard', 'CMAGAKJ67e9hRZgfC5SFTbZH8MgEmtqazKXjmkaJjWTJ');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({ count: [0, (0, serializers_1.u16)()] })
        .deserializeUsing((account) => deserializeNftMintCounter(account))
        .whereSize(2);
}
exports.getNftMintCounterGpaBuilder = getNftMintCounterGpaBuilder;
function getNftMintCounterSize() {
    return 2;
}
exports.getNftMintCounterSize = getNftMintCounterSize;
function findNftMintCounterPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplCoreCandyGuard', 'CMAGAKJ67e9hRZgfC5SFTbZH8MgEmtqazKXjmkaJjWTJ');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('nft_mint_limit'),
        (0, serializers_1.u8)().serialize(seeds.id),
        (0, serializers_1.publicKey)().serialize(seeds.mint),
        (0, serializers_1.publicKey)().serialize(seeds.candyGuard),
        (0, serializers_1.publicKey)().serialize(seeds.candyMachine),
    ]);
}
exports.findNftMintCounterPda = findNftMintCounterPda;
async function fetchNftMintCounterFromSeeds(context, seeds, options) {
    return fetchNftMintCounter(context, findNftMintCounterPda(context, seeds), options);
}
exports.fetchNftMintCounterFromSeeds = fetchNftMintCounterFromSeeds;
async function safeFetchNftMintCounterFromSeeds(context, seeds, options) {
    return safeFetchNftMintCounter(context, findNftMintCounterPda(context, seeds), options);
}
exports.safeFetchNftMintCounterFromSeeds = safeFetchNftMintCounterFromSeeds;
//# sourceMappingURL=nftMintCounter.js.map