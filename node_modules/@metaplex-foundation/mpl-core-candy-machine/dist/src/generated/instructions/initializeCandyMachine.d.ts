/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { ConfigLineSettings, ConfigLineSettingsArgs, HiddenSettings, HiddenSettingsArgs } from '../types';
export declare type InitializeCandyMachineInstructionAccounts = {
    /**
     * Candy Machine account. The account space must be allocated to allow accounts larger
     * than 10kb.
     *
     */
    candyMachine: PublicKey | Pda;
    /**
     * Authority PDA used to verify minted NFTs to the collection.
     *
     */
    authorityPda?: PublicKey | Pda;
    /**
     * Candy Machine authority. This is the address that controls the upate of the candy machine.
     *
     */
    authority?: PublicKey | Pda;
    /** Payer of the transaction. */
    payer?: Signer;
    /**
     * Mint account of the collection.
     *
     */
    collection: PublicKey | Pda;
    /**
     * Update authority of the collection. This needs to be a signer so the candy
     * machine can approve a delegate to verify minted NFTs to the collection.
     */
    collectionUpdateAuthority: Signer;
    /**
     * Token Metadata program.
     *
     */
    mplCoreProgram?: PublicKey | Pda;
    /** System program. */
    systemProgram?: PublicKey | Pda;
    /**
     * Instructions sysvar account.
     *
     */
    sysvarInstructions?: PublicKey | Pda;
};
export declare type InitializeCandyMachineInstructionData = {
    discriminator: Array<number>;
    /** Number of assets available */
    itemsAvailable: bigint;
    /** Max supply of each individual asset (default 0) */
    maxEditionSupply: bigint;
    /** Indicates if the asset is mutable or not (default yes) */
    isMutable: boolean;
    /** Config line settings */
    configLineSettings: Option<ConfigLineSettings>;
    /** Hidden setttings */
    hiddenSettings: Option<HiddenSettings>;
};
export declare type InitializeCandyMachineInstructionDataArgs = {
    /** Number of assets available */
    itemsAvailable: number | bigint;
    /** Max supply of each individual asset (default 0) */
    maxEditionSupply?: number | bigint;
    /** Indicates if the asset is mutable or not (default yes) */
    isMutable?: boolean;
    /** Config line settings */
    configLineSettings?: OptionOrNullable<ConfigLineSettingsArgs>;
    /** Hidden setttings */
    hiddenSettings?: OptionOrNullable<HiddenSettingsArgs>;
};
export declare function getInitializeCandyMachineInstructionDataSerializer(): Serializer<InitializeCandyMachineInstructionDataArgs, InitializeCandyMachineInstructionData>;
export declare type InitializeCandyMachineInstructionArgs = InitializeCandyMachineInstructionDataArgs;
export declare function initializeCandyMachine(context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>, input: InitializeCandyMachineInstructionAccounts & InitializeCandyMachineInstructionArgs): TransactionBuilder;
