/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { PluginAuthorityPair, PluginAuthorityPairArgs } from '@metaplex-foundation/mpl-core';
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { PickPartial } from '../shared';
export declare type MintAssetFromCandyMachineInstructionAccounts = {
    /** Candy machine account. */
    candyMachine: PublicKey | Pda;
    /**
     * Candy machine authority account. This is the account that holds a delegate
     * to verify an item into the collection.
     *
     */
    authorityPda?: PublicKey | Pda;
    /** Candy machine mint authority (mint only allowed for the mint_authority). */
    mintAuthority: Signer;
    /** Payer for the transaction and account allocation (rent). */
    payer?: Signer;
    /**
     * NFT account owner.
     *
     */
    assetOwner: PublicKey | Pda;
    /**
     * Mint account of the NFT. The account will be initialized if necessary.
     *
     */
    asset: PublicKey | Pda | Signer;
    /**
     * Mint account of the collection NFT.
     *
     */
    collection: PublicKey | Pda;
    /**
     * Token Metadata program.
     *
     */
    mplCoreProgram?: PublicKey | Pda;
    /** System program. */
    systemProgram?: PublicKey | Pda;
    /**
     * Instructions sysvar account.
     *
     */
    sysvarInstructions?: PublicKey | Pda;
    /**
     * SlotHashes sysvar cluster data.
     *
     */
    recentSlothashes?: PublicKey | Pda;
};
export declare type MintAssetFromCandyMachineInstructionData = {
    discriminator: Array<number>;
    plugins: Array<PluginAuthorityPair>;
};
export declare type MintAssetFromCandyMachineInstructionDataArgs = {
    plugins: Array<PluginAuthorityPairArgs>;
};
export declare function getMintAssetFromCandyMachineInstructionDataSerializer(): Serializer<MintAssetFromCandyMachineInstructionDataArgs, MintAssetFromCandyMachineInstructionData>;
export declare type MintAssetFromCandyMachineInstructionArgs = PickPartial<MintAssetFromCandyMachineInstructionDataArgs, 'plugins'>;
export declare function mintAssetFromCandyMachine(context: Pick<Context, 'eddsa' | 'payer' | 'programs'>, input: MintAssetFromCandyMachineInstructionAccounts & MintAssetFromCandyMachineInstructionArgs): TransactionBuilder;
