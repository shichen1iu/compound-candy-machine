/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export declare type MintV1InstructionAccounts = {
    /** Candy Guard account. */
    candyGuard?: PublicKey | Pda;
    /**
     * Candy Machine program account.
     *
     */
    candyMachineProgram?: PublicKey | Pda;
    /** Candy machine account. */
    candyMachine: PublicKey | Pda;
    /**
     * Candy Machine authority account.
     *
     */
    candyMachineAuthorityPda?: PublicKey | Pda;
    /** Payer for the mint (SOL) fees. */
    payer?: Signer;
    /** Minter account for validation and non-SOL fees. */
    minter?: Signer;
    /** Optionally mint to different owner */
    owner?: PublicKey | Pda;
    /**
     * Mint account of the NFT. The account will be initialized if necessary.
     *
     * Must be a signer if:
     * * the nft_mint account does not exist.
     *
     */
    asset: PublicKey | Pda | Signer;
    /**
     * Mint account of the collection NFT.
     *
     */
    collection: PublicKey | Pda;
    /**
     * Token Metadata program.
     *
     * Token Metadata program.
     *
     */
    mplCoreProgram?: PublicKey | Pda;
    /**
     * SPL Token program.
     * System program.
     */
    systemProgram?: PublicKey | Pda;
    /**
     * Instructions sysvar account.
     *
     */
    sysvarInstructions?: PublicKey | Pda;
    /**
     * SlotHashes sysvar cluster data.
     *
     */
    recentSlothashes?: PublicKey | Pda;
};
export declare type MintV1InstructionData = {
    discriminator: Array<number>;
    mintArgs: Uint8Array;
    group: Option<string>;
};
export declare type MintV1InstructionDataArgs = {
    mintArgs: Uint8Array;
    group: OptionOrNullable<string>;
};
export declare function getMintV1InstructionDataSerializer(): Serializer<MintV1InstructionDataArgs, MintV1InstructionData>;
export declare type MintV1InstructionArgs = MintV1InstructionDataArgs;
export declare function mintV1(context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>, input: MintV1InstructionAccounts & MintV1InstructionArgs): TransactionBuilder;
