"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mintV1 = exports.getMintV1InstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const shared_1 = require("../shared");
function getMintV1InstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['mintArgs', (0, serializers_1.bytes)({ size: (0, serializers_1.u32)() })],
        ['group', (0, serializers_1.option)((0, serializers_1.string)())],
    ], { description: 'MintV1InstructionData' }), (value) => ({
        ...value,
        discriminator: [145, 98, 192, 118, 184, 147, 118, 104],
    }));
}
exports.getMintV1InstructionDataSerializer = getMintV1InstructionDataSerializer;
// Instruction.
function mintV1(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplCoreCandyGuard', 'CMAGAKJ67e9hRZgfC5SFTbZH8MgEmtqazKXjmkaJjWTJ');
    // Accounts.
    const resolvedAccounts = {
        candyGuard: {
            index: 0,
            isWritable: false,
            value: input.candyGuard ?? null,
        },
        candyMachineProgram: {
            index: 1,
            isWritable: false,
            value: input.candyMachineProgram ?? null,
        },
        candyMachine: {
            index: 2,
            isWritable: true,
            value: input.candyMachine ?? null,
        },
        candyMachineAuthorityPda: {
            index: 3,
            isWritable: true,
            value: input.candyMachineAuthorityPda ?? null,
        },
        payer: { index: 4, isWritable: true, value: input.payer ?? null },
        minter: { index: 5, isWritable: true, value: input.minter ?? null },
        owner: { index: 6, isWritable: false, value: input.owner ?? null },
        asset: { index: 7, isWritable: true, value: input.asset ?? null },
        collection: { index: 8, isWritable: true, value: input.collection ?? null },
        mplCoreProgram: {
            index: 9,
            isWritable: false,
            value: input.mplCoreProgram ?? null,
        },
        systemProgram: {
            index: 10,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        sysvarInstructions: {
            index: 11,
            isWritable: false,
            value: input.sysvarInstructions ?? null,
        },
        recentSlothashes: {
            index: 12,
            isWritable: false,
            value: input.recentSlothashes ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.candyGuard.value) {
        resolvedAccounts.candyGuard.value = (0, hooked_1.findCandyGuardPda)(context, {
            base: (0, shared_1.expectPublicKey)(resolvedAccounts.candyMachine.value),
        });
    }
    if (!resolvedAccounts.candyMachineProgram.value) {
        resolvedAccounts.candyMachineProgram.value = context.programs.getPublicKey('mplCandyMachine', 'CMACYFENjoBMHzapRXyo1JZkVS6EtaDDzkjMrmQLvr4J');
        resolvedAccounts.candyMachineProgram.isWritable = false;
    }
    if (!resolvedAccounts.candyMachineAuthorityPda.value) {
        resolvedAccounts.candyMachineAuthorityPda.value =
            (0, hooked_1.findCandyMachineAuthorityPda)(context, {
                candyMachine: (0, shared_1.expectPublicKey)(resolvedAccounts.candyMachine.value),
            });
    }
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.minter.value) {
        resolvedAccounts.minter.value = context.identity;
    }
    if (!resolvedAccounts.mplCoreProgram.value) {
        resolvedAccounts.mplCoreProgram.value = context.programs.getPublicKey('mplCore', 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d');
        resolvedAccounts.mplCoreProgram.isWritable = false;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.sysvarInstructions.value) {
        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
    }
    if (!resolvedAccounts.recentSlothashes.value) {
        resolvedAccounts.recentSlothashes.value = (0, umi_1.publicKey)('SysvarS1otHashes111111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getMintV1InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.mintV1 = mintV1;
//# sourceMappingURL=mintV1.js.map