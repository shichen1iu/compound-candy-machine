/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export declare type SetCollectionInstructionAccounts = {
    /** Candy Machine account. */
    candyMachine: PublicKey | Pda;
    /** Candy Machine authority. */
    authority?: Signer;
    /**
     * Authority PDA.
     *
     */
    authorityPda?: PublicKey | Pda;
    /** Payer of the transaction. */
    payer?: Signer;
    /**
     * Update authority of the collection.
     *
     */
    collectionUpdateAuthority: PublicKey | Pda;
    /**
     * Mint account of the collection.
     *
     */
    collection: PublicKey | Pda;
    /** Update authority of the new collection NFT. */
    newCollectionUpdateAuthority: Signer;
    /**
     * New collection mint.
     *
     */
    newCollection: PublicKey | Pda;
    /**
     * Token Metadata program.
     *
     */
    mplCoreProgram?: PublicKey | Pda;
    /** System program. */
    systemProgram?: PublicKey | Pda;
    /**
     * Instructions sysvar account.
     *
     */
    sysvarInstructions?: PublicKey | Pda;
};
export declare type SetCollectionInstructionData = {
    discriminator: Array<number>;
};
export declare type SetCollectionInstructionDataArgs = {};
export declare function getSetCollectionInstructionDataSerializer(): Serializer<SetCollectionInstructionDataArgs, SetCollectionInstructionData>;
export declare function setCollection(context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>, input: SetCollectionInstructionAccounts): TransactionBuilder;
