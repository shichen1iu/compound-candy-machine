"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.setCollection = exports.getSetCollectionInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const shared_1 = require("../shared");
function getSetCollectionInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })]], { description: 'SetCollectionInstructionData' }), (value) => ({
        ...value,
        discriminator: [192, 254, 206, 76, 168, 182, 59, 223],
    }));
}
exports.getSetCollectionInstructionDataSerializer = getSetCollectionInstructionDataSerializer;
// Instruction.
function setCollection(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplCoreCandyMachineCore', 'CMACYFENjoBMHzapRXyo1JZkVS6EtaDDzkjMrmQLvr4J');
    // Accounts.
    const resolvedAccounts = {
        candyMachine: {
            index: 0,
            isWritable: true,
            value: input.candyMachine ?? null,
        },
        authority: { index: 1, isWritable: false, value: input.authority ?? null },
        authorityPda: {
            index: 2,
            isWritable: true,
            value: input.authorityPda ?? null,
        },
        payer: { index: 3, isWritable: true, value: input.payer ?? null },
        collectionUpdateAuthority: {
            index: 4,
            isWritable: false,
            value: input.collectionUpdateAuthority ?? null,
        },
        collection: { index: 5, isWritable: true, value: input.collection ?? null },
        newCollectionUpdateAuthority: {
            index: 6,
            isWritable: false,
            value: input.newCollectionUpdateAuthority ?? null,
        },
        newCollection: {
            index: 7,
            isWritable: true,
            value: input.newCollection ?? null,
        },
        mplCoreProgram: {
            index: 8,
            isWritable: false,
            value: input.mplCoreProgram ?? null,
        },
        systemProgram: {
            index: 9,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        sysvarInstructions: {
            index: 10,
            isWritable: false,
            value: input.sysvarInstructions ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    if (!resolvedAccounts.authorityPda.value) {
        resolvedAccounts.authorityPda.value = (0, hooked_1.findCandyMachineAuthorityPda)(context, { candyMachine: (0, shared_1.expectPublicKey)(resolvedAccounts.candyMachine.value) });
    }
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.mplCoreProgram.value) {
        resolvedAccounts.mplCoreProgram.value = context.programs.getPublicKey('mplCore', 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d');
        resolvedAccounts.mplCoreProgram.isWritable = false;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.sysvarInstructions.value) {
        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getSetCollectionInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.setCollection = setCollection;
//# sourceMappingURL=setCollection.js.map