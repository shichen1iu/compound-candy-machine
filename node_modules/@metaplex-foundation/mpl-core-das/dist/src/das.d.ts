import { PublicKey, Umi } from '@metaplex-foundation/umi';
import { DasApiAsset, SearchAssetsRpcInput } from '@metaplex-foundation/digital-asset-standard-api';
import { MPL_CORE_ASSET, MPL_CORE_COLLECTION } from './constants';
import { AssetOptions, AssetResult, CollectionResult, Pagination } from './types';
declare function searchAssets(context: Umi, input: Omit<SearchAssetsRpcInput, 'interface' | 'burnt'> & {
    interface?: typeof MPL_CORE_ASSET;
} & AssetOptions): Promise<AssetResult[]>;
declare function searchAssets(context: Umi, input: Omit<SearchAssetsRpcInput, 'interface' | 'burnt'> & {
    interface?: typeof MPL_CORE_COLLECTION;
} & AssetOptions): Promise<CollectionResult[]>;
declare function searchCollections(context: Umi, input: Omit<SearchAssetsRpcInput, 'interface' | 'burnt'> & AssetOptions): Promise<CollectionResult[]>;
declare function getAssetsByOwner(context: Umi, input: {
    owner: PublicKey;
} & Pagination & AssetOptions): Promise<AssetResult[]>;
declare function getAssetsByAuthority(context: Umi, input: {
    authority: PublicKey;
} & Pagination & AssetOptions): Promise<AssetResult[]>;
declare function getAssetsByCollection(context: Umi, input: {
    collection: PublicKey;
} & Pagination & AssetOptions): Promise<AssetResult[]>;
/**
 * Convenience function to fetch a single asset by pubkey
 * @param context Umi
 * @param asset pubkey of the asset
 * @param options
 * @returns
 */
declare function getAsset(context: Umi, asset: PublicKey, options?: AssetOptions): Promise<AssetResult>;
/**
 * Convenience function to fetch a single collection by pubkey
 * @param context
 * @param collection
 * @returns
 */
declare function getCollection(context: Umi, collection: PublicKey): Promise<CollectionResult>;
declare function getCollectionsByUpdateAuthority(context: Umi, input: {
    updateAuthority: PublicKey;
} & Pagination & AssetOptions): Promise<CollectionResult[]>;
declare function dasAssetsToCoreAssets(context: Umi, assets: DasApiAsset[], options: AssetOptions): Promise<AssetResult[]>;
declare function dasAssetToCoreCollection(context: Umi, asset: DasApiAsset & AssetOptions): Promise<CollectionResult>;
export declare const das: {
    readonly searchAssets: typeof searchAssets;
    readonly searchCollections: typeof searchCollections;
    readonly getAssetsByOwner: typeof getAssetsByOwner;
    readonly getAssetsByAuthority: typeof getAssetsByAuthority;
    readonly getAssetsByCollection: typeof getAssetsByCollection;
    readonly getCollectionsByUpdateAuthority: typeof getCollectionsByUpdateAuthority;
    readonly getAsset: typeof getAsset;
    readonly getCollection: typeof getCollection;
    readonly dasAssetsToCoreAssets: typeof dasAssetsToCoreAssets;
    readonly dasAssetToCoreCollection: typeof dasAssetToCoreCollection;
};
export {};
